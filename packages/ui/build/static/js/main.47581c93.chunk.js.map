{"version":3,"sources":["apollo/client.ts","pages/Home.tsx","pages/Settings.tsx","utils/text-utils.ts","components/SearchBar.tsx","components/LogTable.tsx","components/Table.tsx","components/Nav.tsx","types/types.ts","pages/Logs/LogsChart.tsx","pages/Logs/Logs.tsx","pages/Chains/Chains.tsx","pages/Hosts/HostsForm.tsx","pages/Hosts/Hosts.tsx","pages/Nodes/NodesCSV.tsx","utils/error-utils.ts","pages/Nodes/NodesForm.tsx","pages/Nodes/NodeStatus.tsx","pages/Nodes/Nodes.tsx","pages/Oracles/Oracles.tsx","pages/Webhooks/Webhooks.tsx","App.tsx","index.tsx"],"names":["ApolloClient","uri","cache","InMemoryCache","addTypename","typePolicies","Query","fields","logs","keyArgs","merge","existing","docs","hasNextPage","hasPrevPage","limit","page","totalDocs","totalPages","pagingCounter","incoming","sort","a","b","Date","timestamp","getTime","View","props","style","display","justifyContent","alignItems","abbreviations","formatHeaderCell","field","toUpperCase","slice","replace","trim","split","map","w","includes","toLowerCase","join","SearchBar","value","handleChange","type","sx","searchText","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","id","onChange","target","startAdornment","InputAdornment","position","endAdornment","cursor","onClick","label","descendingComparator","orderBy","getComparator","order","EnhancedTableHead","rows","onRequestSort","headCells","length","Object","keys","filter","column","TableHead","TableRow","TableCell","headCell","i","align","sortDirection","TableSortLabel","active","direction","property","event","LogTable","loading","loadItems","height","searchable","selectedRow","onSelectRow","useState","setOrder","setOrderBy","searchTerm","setSearchTerm","parsedRows","message","parsedMessage","JSON","parse","Number","toISOString","tableEl","useRef","distanceBottom","setDistanceBottom","hasMore","loadMore","useCallback","scrollListener","bottom","current","scrollHeight","clientHeight","Math","round","scrollTop","useLayoutEffect","tableRef","addEventListener","removeEventListener","Row","row","index","open","setOpen","border","hover","selected","String","width","Chip","color","OK","ERROR","status","IconButton","size","entries","key","Array","isArray","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","stringify","health","Paper","overflow","padding","marginBottom","TableContainer","maxHeight","ref","stickyHeader","minWidth","_event","rowCount","TableBody","values","marginTop","CircularProgress","Table","paginate","numPerPage","setPage","rowsPerPage","setRowsPerPage","emptyRows","max","TablePagination","rowsPerPageOptions","count","onPageChange","_","newPage","onRowsPerPageChange","parseInt","Nav","history","useHistory","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","defaultOptions","CreateHostDocument","gql","CreateNodeDocument","CreateNodesCsvDocument","RebootServerDocument","EnableHaProxyServerDocument","DisableHaProxyServerDocument","MuteMonitorDocument","UnmuteMonitorDocument","ChainsDocument","HostsDocument","LocationsDocument","NodesDocument","useNodesQuery","baseOptions","options","Apollo","LogsDocument","OraclesDocument","WebhooksDocument","GetHostsChainsAndLoadBalancersDocument","GetNodeStatusDocument","ChartJS","register","CategoryScale","LinearScale","BarElement","Tooltip","responsive","maintainAspectRatio","LogsChart","logPeriod","timePeriod","now","increments","floor","resolution","console","log","labels","dayjs","format","data","datasets","backgroundColor","ONE_MINUTE","ONE_HOUR","ONE_DAY","timePeriods","code","Logs","nodes","setNodes","setLogPeriod","logsLoading","setLogsLoading","nodesData","nodesError","error","nodesLoading","useLogsQuery","variables","nodeIds","onCompleted","onError","logsData","logsError","fetchMore","refetch","useEffect","flexDirection","Select","multiple","labelId","input","renderValue","find","backend","port","server","MenuItem","Checkbox","checked","indexOf","Chains","useChainsQuery","chains","HostsForm","refetchHosts","location","setLocation","name","setName","ip","setIP","fqdn","setFQDN","loadBalancer","setLoadBalancer","useLocationsQuery","useCreateHostMutation","submit","locations","TextField","Switch","Button","Hosts","useHostsQuery","hosts","top","left","transform","bgcolor","boxShadow","p","NodesCSV","formData","loadBalancers","refetchNodes","undefined","setNodesError","backendError","setBackendError","handleClose","useCreateNodesCsvMutation","parseBackendError","validChains","validHosts","validLoadBalancers","schema","chain","host","haProxy","every","lb","test","url","Modal","onClose","onFileLoaded","nodesWithRequiredFields","node","invalidNodes","parsedNodes","invalidFields","object","validate","Boolean","parserOptions","header","Alert","severity","AlertTitle","NodesForm","setChain","setHost","setIp","setLoadBalancers","setPort","setBackend","setServer","setHaproxy","useCreateNodeMutation","NodeStatus","selectedNode","setSelectedNode","muted","rebooting","setRebooting","useGetNodeStatusLazyQuery","getStatus","useRebootServerMutation","setTimeout","_error","rebootServer","useEnableHaProxyServerMutation","enable","useDisableHaProxyServerMutation","disable","useMuteMonitorMutation","muteMonitor","useUnmuteMonitorMutation","unmuteMonitor","haProxyStatus","haProxyStatusText","muteStatusText","handleRebootServer","disabled","marginRight","handleHaProxyToggle","handleMuteToggle","Nodes","useGetHostsChainsAndLoadBalancersQuery","formError","formLoading","Oracles","useOraclesQuery","oracles","Webhooks","useWebhooksQuery","webhooks","AppBar","styled","MuiAppBar","shouldForwardProp","prop","theme","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","spacing","breakpoints","up","mdTheme","createTheme","DashboardContent","React","toggleDrawer","ThemeProvider","CssBaseline","Toolbar","pr","edge","flex","noWrap","flexGrow","px","palette","mode","grey","Container","maxWidth","mt","mb","exact","path","Home","Settings","Dashboard","ReactDOM","render","StrictMode","ApolloProvider","client","apolloClient","document","getElementById"],"mappings":"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","file":"static/js/main.47581c93.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { IPaginatedLogs } from \"../types\";\n\nexport default new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache({\n    addTypename: true,\n    typePolicies: {\n      Query: {\n        fields: {\n          logs: {\n            keyArgs: false,\n            /* Merge new Logs into cache when fetching paginated logs for infinite scrolling LogTable */\n            merge(\n              existing: IPaginatedLogs = {\n                docs: [],\n                hasNextPage: false,\n                hasPrevPage: false,\n                limit: 0,\n                page: 0,\n                totalDocs: 0,\n                totalPages: 0,\n                pagingCounter: 0,\n              },\n              incoming: IPaginatedLogs,\n            ) {\n              return {\n                ...incoming,\n                docs: [...existing.docs, ...incoming.docs].sort(\n                  (a, b) =>\n                    new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime(),\n                ),\n              };\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","import * as React from \"react\";\ninterface ViewProps {\n  children?: React.ReactNode;\n}\n\nexport function View(props: ViewProps) {\n  return <div   style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}>HOME</div>;\n}\n","import * as React from \"react\";\ninterface ViewProps {\n  children?: React.ReactNode;\n}\n\nexport function View(props: ViewProps) {\n  return <div   style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }}>SETTINGS</div>;\n}\n","const abbreviations = [\"aws\", \"id\", \"ip\", \"ssl\", \"url\"];\n\nexport const formatHeaderCell = (field: string): string => {\n  const uppercased = field[0].toUpperCase() + field.slice(1);\n  const spaced = uppercased.replace(/([A-Z])/g, \" $1\").trim();\n  return spaced\n    .split(\" \")\n    .map((w) => (abbreviations.includes(w.toLowerCase()) ? w.toUpperCase() : w))\n    .join(\" \");\n};","import { Dispatch, SetStateAction } from \"react\";\nimport { FormControl, InputAdornment, InputLabel, OutlinedInput } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\n\ninterface ISearchBarProps {\n  value: string;\n  handleChange: Dispatch<SetStateAction<string>>;\n  type?: string;\n  sx?: any;\n}\n\nexport default function SearchBar({ value, handleChange, type, sx }: ISearchBarProps) {\n  const searchText = `Search${type ? ` ${type}` : \"\"}`;\n\n  return (\n    <FormControl fullWidth sx={sx}>\n      <InputLabel htmlFor=\"search-input\">{searchText}</InputLabel>\n      <OutlinedInput\n        id=\"search-input\"\n        value={value}\n        onChange={({ target }) => handleChange(target.value)}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n        endAdornment={\n          value && <HighlightOffIcon sx={{ cursor: \"pointer\" }} onClick={() => handleChange(\"\")} />\n        }\n        label={searchText}\n      />\n    </FormControl>\n  );\n}\n","import {\n  Dispatch,\n  MouseEvent,\n  SetStateAction,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Box,\n  Chip,\n  CircularProgress,\n  Collapse,\n  IconButton,\n  Paper,\n  Table as MUITable,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Typography,\n} from \"@mui/material\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\n\nimport { ILogsQuery, IParsedLog } from \"types\";\nimport { formatHeaderCell } from \"utils\";\nimport SearchBar from \"./SearchBar\";\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = \"asc\" | \"desc\";\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (a: { [key in Key]: any }, b: { [key in Key]: any }) => number {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\ninterface EnhancedTableProps {\n  rows: any[];\n  onRequestSort: (event: MouseEvent<unknown>, property: any) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n}\n\nfunction EnhancedTableHead({ rows, order, orderBy, onRequestSort }: EnhancedTableProps) {\n  const createSortHandler = (property: any) => (event: MouseEvent<unknown>) => {\n    onRequestSort(event, property);\n  };\n  const headCells = rows.length\n    ? Object.keys(rows[0])\n        .filter((value) => value !== \"id\" && value !== \"__typename\" && value !== \"health\")\n        .map((column) => ({ id: column, label: formatHeaderCell(column) }))\n    : [];\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell />\n        <TableCell />\n        {headCells.map((headCell, i) => (\n          <TableCell\n            key={headCell.id}\n            align={!i ? \"left\" : \"right\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\ninterface TableProps {\n  rows: ILogsQuery[\"logs\"][\"docs\"];\n  loading: boolean;\n  loadItems: any;\n  height?: number;\n  searchable?: boolean;\n  selectedRow?: string;\n  type?: string;\n  onSelectRow?: Dispatch<SetStateAction<any>>;\n}\n\nexport function LogTable({\n  rows,\n  loading,\n  loadItems,\n  height,\n  searchable,\n  selectedRow,\n  type,\n  onSelectRow,\n}: TableProps) {\n  const [order, setOrder] = useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n\n  const parseLogsForTable = (logs: ILogsQuery[\"logs\"][\"docs\"]): IParsedLog[] => {\n    return logs.map(({ message, timestamp }) => {\n      const parsedMessage = JSON.parse(message);\n      return {\n        timestamp: new Date(Number(timestamp)).toISOString(),\n        ...parsedMessage,\n      };\n    });\n  };\n\n  const parsedRows = parseLogsForTable(rows);\n\n  /* ----- Sorting ----- */\n  const handleRequestSort = (_event: MouseEvent<unknown>, property: any) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  /* ----- Infinite Scroll ----- */\n  const tableEl: any = useRef();\n\n  const [distanceBottom, setDistanceBottom] = useState(0);\n  const [hasMore] = useState(true);\n\n  const loadMore = useCallback(() => {\n    loadItems();\n  }, [rows]);\n\n  const scrollListener = useCallback(() => {\n    let bottom = tableEl.current.scrollHeight - tableEl.current.clientHeight;\n    if (!distanceBottom) {\n      setDistanceBottom(Math.round((bottom / 100) * 20));\n    }\n    if (!loading && tableEl.current.scrollTop > bottom - distanceBottom && hasMore) {\n      loadMore();\n    }\n  }, [hasMore, loadMore, loading, distanceBottom]);\n\n  useLayoutEffect(() => {\n    const tableRef = tableEl!.current;\n    tableRef.addEventListener(\"scroll\", scrollListener);\n    return () => {\n      tableRef.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, [scrollListener]);\n\n  /* ----- Row Component ----- */\n  interface RowProps {\n    row: IParsedLog;\n    index: number;\n  }\n\n  const Row = ({ row, index }: RowProps) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <>\n        <TableRow\n          key={`${row.timestamp}-${index}`}\n          sx={{\n            \"&:last-child td, &:last-child th\": { border: 0 },\n            cursor: `${onSelectRow ? \"pointer\" : \"default\"}`,\n          }}\n          hover={!!onSelectRow}\n          selected={selectedRow === String(row.timestamp)}\n        >\n          <TableCell sx={{ width: 16 }}>\n            <Chip\n              sx={{ width: \"100%\" }}\n              color={\n                ({ OK: \"success\", ERROR: \"error\" }[row.status] as any) ||\n                (\"default\" as any)\n              }\n            />\n          </TableCell>\n          <TableCell>\n            <IconButton\n              aria-label=\"expand row\"\n              size=\"small\"\n              onClick={() => setOpen(!open)}\n            >\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n            </IconButton>\n          </TableCell>\n          {Object.entries(row)\n            .filter(([key]) => key !== \"id\" && key !== \"__typename\" && key !== \"health\")\n            .map(([_, value], i) => {\n              return (\n                <TableCell\n                  key={`${value as any}-${i}`}\n                  align={!i ? \"left\" : \"right\"}\n                  onClick={() => onSelectRow?.(row)}\n                >\n                  {Array.isArray(value) ? value.join(\", \") : String(value)}\n                </TableCell>\n              );\n            })}\n        </TableRow>\n        <TableRow>\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n              <Box sx={{ margin: 1 }}>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                  <div>\n                    <pre>{JSON.stringify(row.health, null, 2)}</pre>\n                  </div>\n                </Typography>\n              </Box>\n            </Collapse>\n          </TableCell>\n        </TableRow>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\", padding: \"16px\" }}>\n        {type && (\n          <Typography align=\"center\" variant=\"h4\" gutterBottom>\n            {type}\n          </Typography>\n        )}\n        {searchable && (\n          <SearchBar\n            value={searchTerm}\n            handleChange={setSearchTerm}\n            type={type}\n            sx={{ marginBottom: \"16px\" }}\n          />\n        )}\n        <TableContainer sx={{ maxHeight: height || 600 }} ref={tableEl}>\n          <MUITable\n            stickyHeader\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size=\"small\"\n          >\n            <EnhancedTableHead\n              rows={parsedRows}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {parsedRows\n                .slice()\n                .filter(\n                  (row: any) =>\n                    !searchable ||\n                    Object.values(row)\n                      .join()\n                      .toLowerCase()\n                      .trim()\n                      .includes(searchTerm.toLowerCase().trim()),\n                )\n                .sort(getComparator(order, orderBy))\n                .map((row, i: number) => (\n                  <Row row={row} index={i} />\n                ))}\n            </TableBody>\n          </MUITable>\n          {loading && (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                overflow: \"hidden\",\n                marginTop: 8,\n              }}\n            >\n              <CircularProgress />\n            </div>\n          )}\n        </TableContainer>\n      </Paper>\n    </Box>\n  );\n}\n","import { ChangeEvent, Dispatch, MouseEvent, SetStateAction, useState } from \"react\";\nimport {\n  Box,\n  Paper,\n  Table as MUITable,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Typography,\n} from \"@mui/material\";\n\nimport { formatHeaderCell } from \"utils\";\nimport SearchBar from \"./SearchBar\";\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = \"asc\" | \"desc\";\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (a: { [key in Key]: any }, b: { [key in Key]: any }) => number {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\ninterface EnhancedTableProps {\n  rows: any[];\n  onRequestSort: (event: MouseEvent<unknown>, property: any) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n}\n\nfunction EnhancedTableHead({ rows, order, orderBy, onRequestSort }: EnhancedTableProps) {\n  const createSortHandler = (property: any) => (event: MouseEvent<unknown>) => {\n    onRequestSort(event, property);\n  };\n  const headCells = rows.length\n    ? Object.keys(rows[0])\n        .filter((value) => value !== \"id\" && value !== \"__typename\")\n        .map((column) => ({ id: column, label: formatHeaderCell(column) }))\n    : [];\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell, i) => (\n          <TableCell\n            key={headCell.id}\n            align={!i ? \"left\" : \"right\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\ninterface TableProps {\n  rows: any;\n  height?: number;\n  searchable?: boolean;\n  paginate?: boolean;\n  numPerPage?: number;\n  selectedRow?: string;\n  type?: string;\n  onSelectRow?: Dispatch<SetStateAction<any>>;\n}\n\nexport function Table({\n  rows,\n  height,\n  searchable,\n  paginate,\n  numPerPage,\n  selectedRow,\n  type,\n  onSelectRow,\n}: TableProps) {\n  const [order, setOrder] = useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(\n    paginate ? numPerPage || 25 : rows.length,\n  );\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n\n  const handleRequestSort = (_event: MouseEvent<unknown>, property: any) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (_: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\", padding: \"16px\" }}>\n        {type && (\n          <Typography align=\"center\" variant=\"h4\" gutterBottom>\n            {type}\n          </Typography>\n        )}\n        {searchable && (\n          <SearchBar\n            value={searchTerm}\n            handleChange={setSearchTerm}\n            type={type}\n            sx={{ marginBottom: \"16px\" }}\n          />\n        )}\n        <TableContainer sx={{ maxHeight: height || 600 }}>\n          <MUITable\n            stickyHeader\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size=\"small\"\n          >\n            <EnhancedTableHead\n              rows={rows}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows\n                .slice()\n\n                .filter(\n                  (row: any) =>\n                    !searchable ||\n                    Object.values(row)\n                      .join()\n                      .toLowerCase()\n                      .trim()\n                      .includes(searchTerm.toLowerCase().trim()),\n                )\n                .sort(getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row: any) => {\n                  return (\n                    <TableRow\n                      key={String(row.id)}\n                      sx={{\n                        \"&:last-child td, &:last-child th\": { border: 0 },\n                        cursor: `${onSelectRow ? \"pointer\" : \"default\"}`,\n                      }}\n                      hover={!!onSelectRow}\n                      selected={selectedRow === String(row.id)}\n                    >\n                      {Object.entries(row)\n                        .filter(([key]) => key !== \"id\" && key !== \"__typename\")\n                        .map(([_, value], i) => {\n                          return (\n                            <TableCell\n                              key={`${value as any}-${i}`}\n                              align={!i ? \"left\" : \"right\"}\n                              onClick={() => onSelectRow?.(row)}\n                            >\n                              {Array.isArray(value) ? value.join(\", \") : String(value)}\n                            </TableCell>\n                          );\n                        })}\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: 33 * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </MUITable>\n        </TableContainer>\n        {paginate && (\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        )}\n      </Paper>\n    </Box>\n  );\n}\n","import Divider from \"@mui/material/Divider\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ShoppingCartIcon from \"@mui/icons-material/CurrencyExchangeSharp\";\nimport PeopleIcon from \"@mui/icons-material/StorageSharp\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport LayersIcon from \"@mui/icons-material/ComputerSharp\";\nimport SettingsIcon from \"@mui/icons-material/SettingsSharp\";\nimport LogsIcon from \"@mui/icons-material/SubjectSharp\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const Nav = (props: any) => {\n  let history = useHistory();\n  return (\n    <div>\n      <Divider />\n      <List>\n        <div>\n          <ListItem button onClick={() => history.push(\"/logs\")}>\n            <ListItemIcon>\n              <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Logs\" />\n          </ListItem>\n\n          <ListItem button onClick={() => history.push(\"/nodes\")}>\n            <ListItemIcon>\n              <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Nodes\" />\n          </ListItem>\n\n          <ListItem button onClick={() => history.push(\"/hosts\")}>\n            <ListItemIcon>\n              <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Hosts\" />\n          </ListItem>\n\n          <ListItem button onClick={() => history.push(\"/chains\")}>\n            <ListItemIcon>\n              <ShoppingCartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Chains\" />\n          </ListItem>\n\n          <ListItem button onClick={() => history.push(\"/oracles\")}>\n            <ListItemIcon>\n              <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Oracles\" />\n          </ListItem>\n\n          <ListItem button onClick={() => history.push(\"/webhooks\")}>\n            <ListItemIcon>\n              <LogsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Webhooks\" />\n          </ListItem>\n        </div>\n      </List>\n      <Divider />\n      <List>\n        <div>\n          <ListItem button onClick={() => history.push(\"/settings\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Settings\" />\n          </ListItem>\n        </div>\n      </List>\n    </div>\n  );\n};\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type IChain = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type: Scalars['String'];\n  variance?: Maybe<Scalars['Int']>;\n};\n\nexport type IHost = {\n  fqdn?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  ip?: Maybe<Scalars['String']>;\n  loadBalancer: Scalars['Boolean'];\n  location: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type ILocation = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type ILog = {\n  id: Scalars['ID'];\n  label: Scalars['ID'];\n  level: Scalars['String'];\n  message: Scalars['String'];\n  timestamp: Scalars['String'];\n};\n\nexport type IMutation = {\n  createHost?: Maybe<IHost>;\n  createNode?: Maybe<INode>;\n  createNodesCSV: Array<Maybe<INode>>;\n  deleteChain?: Maybe<IChain>;\n  deleteHost?: Maybe<IHost>;\n  deleteNode?: Maybe<INode>;\n  deleteOracle?: Maybe<IOracle>;\n  disableHaProxyServer: Scalars['Boolean'];\n  enableHaProxyServer: Scalars['Boolean'];\n  muteMonitor: INode;\n  rebootServer: Scalars['String'];\n  unmuteMonitor: INode;\n  updateChain?: Maybe<IChain>;\n  updateHost?: Maybe<IHost>;\n  updateNode?: Maybe<INode>;\n  updateNodeInRotation?: Maybe<Scalars['String']>;\n  updateOracle?: Maybe<IOracle>;\n};\n\n\nexport type IMutationCreateHostArgs = {\n  fqdn?: InputMaybe<Scalars['String']>;\n  ip?: InputMaybe<Scalars['String']>;\n  loadBalancer: Scalars['Boolean'];\n  location: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type IMutationCreateNodeArgs = {\n  input?: InputMaybe<INodeInput>;\n};\n\n\nexport type IMutationCreateNodesCsvArgs = {\n  nodes: Array<INodeCsvInput>;\n};\n\n\nexport type IMutationDeleteChainArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type IMutationDeleteHostArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type IMutationDeleteNodeArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type IMutationDeleteOracleArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type IMutationDisableHaProxyServerArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IMutationEnableHaProxyServerArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IMutationMuteMonitorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IMutationRebootServerArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IMutationUnmuteMonitorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IMutationUpdateChainArgs = {\n  name?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type IMutationUpdateHostArgs = {\n  ip?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type IMutationUpdateNodeArgs = {\n  input?: InputMaybe<INodeInput>;\n};\n\n\nexport type IMutationUpdateNodeInRotationArgs = {\n  action?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type IMutationUpdateOracleArgs = {\n  action?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  url?: InputMaybe<Scalars['String']>;\n};\n\nexport type INode = {\n  backend?: Maybe<Scalars['String']>;\n  chain: IChain;\n  haProxy: Scalars['Boolean'];\n  host: IHost;\n  id: Scalars['ID'];\n  loadBalancers?: Maybe<Array<Scalars['ID']>>;\n  muted: Scalars['Boolean'];\n  port: Scalars['Int'];\n  server?: Maybe<Scalars['String']>;\n  ssl?: Maybe<Scalars['Boolean']>;\n  url: Scalars['String'];\n};\n\nexport type INodeCsvInput = {\n  backend?: InputMaybe<Scalars['String']>;\n  chain: Scalars['String'];\n  haProxy: Scalars['Boolean'];\n  host: Scalars['String'];\n  loadBalancers: Array<Scalars['String']>;\n  port: Scalars['Int'];\n  server?: InputMaybe<Scalars['String']>;\n  url: Scalars['String'];\n};\n\nexport type INodeInput = {\n  backend?: InputMaybe<Scalars['String']>;\n  chain: Scalars['ID'];\n  haProxy: Scalars['Boolean'];\n  host: Scalars['ID'];\n  loadBalancers: Array<Scalars['ID']>;\n  port: Scalars['Int'];\n  server?: InputMaybe<Scalars['String']>;\n  url: Scalars['String'];\n};\n\nexport type IOracle = {\n  chain: Scalars['String'];\n  id: Scalars['ID'];\n  urls?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type IPaginatedLogs = {\n  docs: Array<ILog>;\n  hasNextPage: Scalars['Boolean'];\n  hasPrevPage: Scalars['Boolean'];\n  limit: Scalars['Int'];\n  nextPage?: Maybe<Scalars['Int']>;\n  page: Scalars['Int'];\n  pagingCounter: Scalars['Int'];\n  prevPage?: Maybe<Scalars['Int']>;\n  totalDocs: Scalars['Int'];\n  totalPages: Scalars['Int'];\n};\n\nexport type IQuery = {\n  chains: Array<IChain>;\n  getHaProxyStatus: Scalars['Int'];\n  hosts: Array<IHost>;\n  locations: Array<ILocation>;\n  logs: IPaginatedLogs;\n  node: INode;\n  nodeStatus: Scalars['String'];\n  nodes: Array<INode>;\n  oracles: Array<IOracle>;\n  webhooks: Array<IWebhook>;\n};\n\n\nexport type IQueryGetHaProxyStatusArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IQueryHostsArgs = {\n  loadBalancer?: InputMaybe<Scalars['Boolean']>;\n};\n\n\nexport type IQueryLogsArgs = {\n  endDate?: InputMaybe<Scalars['String']>;\n  limit: Scalars['Int'];\n  nodeIds: Array<Scalars['ID']>;\n  page: Scalars['Int'];\n  startDate?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type IQueryNodeArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type IQueryNodeStatusArgs = {\n  id?: InputMaybe<Scalars['String']>;\n};\n\nexport type IWebhook = {\n  chain: Scalars['String'];\n  id: Scalars['ID'];\n  location: Scalars['String'];\n  url: Scalars['String'];\n};\n\nexport type ICreateHostMutationVariables = Exact<{\n  location: Scalars['String'];\n  name: Scalars['String'];\n  loadBalancer: Scalars['Boolean'];\n  ip?: InputMaybe<Scalars['String']>;\n  fqdn?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type ICreateHostMutation = { createHost?: { name: string, ip?: string | null, loadBalancer: boolean } | null };\n\nexport type ICreateNodeMutationVariables = Exact<{\n  chain: Scalars['ID'];\n  host: Scalars['ID'];\n  port: Scalars['Int'];\n  url: Scalars['String'];\n  loadBalancers: Array<Scalars['ID']> | Scalars['ID'];\n  haProxy: Scalars['Boolean'];\n  backend?: InputMaybe<Scalars['String']>;\n  server?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type ICreateNodeMutation = { createNode?: { id: string, url: string } | null };\n\nexport type ICreateNodesCsvMutationVariables = Exact<{\n  nodes: Array<INodeCsvInput> | INodeCsvInput;\n}>;\n\n\nexport type ICreateNodesCsvMutation = { createNodesCSV: Array<{ id: string } | null> };\n\nexport type IRebootServerMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IRebootServerMutation = { rebootServer: string };\n\nexport type IEnableHaProxyServerMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IEnableHaProxyServerMutation = { enableHaProxyServer: boolean };\n\nexport type IDisableHaProxyServerMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IDisableHaProxyServerMutation = { disableHaProxyServer: boolean };\n\nexport type IMuteMonitorMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IMuteMonitorMutation = { muteMonitor: { id: string, muted: boolean } };\n\nexport type IUnmuteMonitorMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IUnmuteMonitorMutation = { unmuteMonitor: { id: string, muted: boolean } };\n\nexport type IChainsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type IChainsQuery = { chains: Array<{ id: string, name: string, type: string, variance?: number | null }> };\n\nexport type IHostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type IHostsQuery = { hosts: Array<{ id: string, name: string, ip?: string | null, loadBalancer: boolean, location: string }> };\n\nexport type ILocationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ILocationsQuery = { locations: Array<{ id: string, name: string }> };\n\nexport type INodeQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type INodeQuery = { node: { id: string, backend?: string | null, port: number, server?: string | null, url: string, ssl?: boolean | null, muted: boolean, loadBalancers?: Array<string> | null } };\n\nexport type INodesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type INodesQuery = { nodes: Array<{ id: string, backend?: string | null, port: number, server?: string | null, url: string, ssl?: boolean | null, muted: boolean, loadBalancers?: Array<string> | null }> };\n\nexport type ILogsQueryVariables = Exact<{\n  nodeIds: Array<Scalars['ID']> | Scalars['ID'];\n  page: Scalars['Int'];\n  limit: Scalars['Int'];\n  startDate?: InputMaybe<Scalars['String']>;\n  endDate?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type ILogsQuery = { logs: { totalDocs: number, page: number, hasPrevPage: boolean, hasNextPage: boolean, docs: Array<{ message: string, level: string, timestamp: string }> } };\n\nexport type IOraclesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type IOraclesQuery = { oracles: Array<{ id: string, chain: string, urls?: Array<string | null> | null }> };\n\nexport type IWebhooksQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type IWebhooksQuery = { webhooks: Array<{ id: string, location: string, chain: string, url: string }> };\n\nexport type IGetHostsChainsAndLoadBalancersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type IGetHostsChainsAndLoadBalancersQuery = { hosts: Array<{ id: string, name: string, ip?: string | null, location: string }>, chains: Array<{ id: string, name: string }>, loadBalancers: Array<{ id: string, name: string }> };\n\nexport type IGetNodeStatusQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type IGetNodeStatusQuery = { haProxyStatus: number };\n\n\nexport const CreateHostDocument = gql`\n    mutation CreateHost($location: String!, $name: String!, $loadBalancer: Boolean!, $ip: String, $fqdn: String) {\n  createHost(\n    location: $location\n    name: $name\n    ip: $ip\n    fqdn: $fqdn\n    loadBalancer: $loadBalancer\n  ) {\n    name\n    ip\n    loadBalancer\n  }\n}\n    `;\nexport type ICreateHostMutationFn = Apollo.MutationFunction<ICreateHostMutation, ICreateHostMutationVariables>;\n\n/**\n * __useCreateHostMutation__\n *\n * To run a mutation, you first call `useCreateHostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateHostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createHostMutation, { data, loading, error }] = useCreateHostMutation({\n *   variables: {\n *      location: // value for 'location'\n *      name: // value for 'name'\n *      loadBalancer: // value for 'loadBalancer'\n *      ip: // value for 'ip'\n *      fqdn: // value for 'fqdn'\n *   },\n * });\n */\nexport function useCreateHostMutation(baseOptions?: Apollo.MutationHookOptions<ICreateHostMutation, ICreateHostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ICreateHostMutation, ICreateHostMutationVariables>(CreateHostDocument, options);\n      }\nexport type CreateHostMutationHookResult = ReturnType<typeof useCreateHostMutation>;\nexport type CreateHostMutationResult = Apollo.MutationResult<ICreateHostMutation>;\nexport type CreateHostMutationOptions = Apollo.BaseMutationOptions<ICreateHostMutation, ICreateHostMutationVariables>;\nexport const CreateNodeDocument = gql`\n    mutation CreateNode($chain: ID!, $host: ID!, $port: Int!, $url: String!, $loadBalancers: [ID!]!, $haProxy: Boolean!, $backend: String, $server: String) {\n  createNode(\n    input: {chain: $chain, host: $host, port: $port, url: $url, loadBalancers: $loadBalancers, haProxy: $haProxy, backend: $backend, server: $server}\n  ) {\n    id\n    url\n  }\n}\n    `;\nexport type ICreateNodeMutationFn = Apollo.MutationFunction<ICreateNodeMutation, ICreateNodeMutationVariables>;\n\n/**\n * __useCreateNodeMutation__\n *\n * To run a mutation, you first call `useCreateNodeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNodeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNodeMutation, { data, loading, error }] = useCreateNodeMutation({\n *   variables: {\n *      chain: // value for 'chain'\n *      host: // value for 'host'\n *      port: // value for 'port'\n *      url: // value for 'url'\n *      loadBalancers: // value for 'loadBalancers'\n *      haProxy: // value for 'haProxy'\n *      backend: // value for 'backend'\n *      server: // value for 'server'\n *   },\n * });\n */\nexport function useCreateNodeMutation(baseOptions?: Apollo.MutationHookOptions<ICreateNodeMutation, ICreateNodeMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ICreateNodeMutation, ICreateNodeMutationVariables>(CreateNodeDocument, options);\n      }\nexport type CreateNodeMutationHookResult = ReturnType<typeof useCreateNodeMutation>;\nexport type CreateNodeMutationResult = Apollo.MutationResult<ICreateNodeMutation>;\nexport type CreateNodeMutationOptions = Apollo.BaseMutationOptions<ICreateNodeMutation, ICreateNodeMutationVariables>;\nexport const CreateNodesCsvDocument = gql`\n    mutation CreateNodesCSV($nodes: [NodeCSVInput!]!) {\n  createNodesCSV(nodes: $nodes) {\n    id\n  }\n}\n    `;\nexport type ICreateNodesCsvMutationFn = Apollo.MutationFunction<ICreateNodesCsvMutation, ICreateNodesCsvMutationVariables>;\n\n/**\n * __useCreateNodesCsvMutation__\n *\n * To run a mutation, you first call `useCreateNodesCsvMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNodesCsvMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNodesCsvMutation, { data, loading, error }] = useCreateNodesCsvMutation({\n *   variables: {\n *      nodes: // value for 'nodes'\n *   },\n * });\n */\nexport function useCreateNodesCsvMutation(baseOptions?: Apollo.MutationHookOptions<ICreateNodesCsvMutation, ICreateNodesCsvMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ICreateNodesCsvMutation, ICreateNodesCsvMutationVariables>(CreateNodesCsvDocument, options);\n      }\nexport type CreateNodesCsvMutationHookResult = ReturnType<typeof useCreateNodesCsvMutation>;\nexport type CreateNodesCsvMutationResult = Apollo.MutationResult<ICreateNodesCsvMutation>;\nexport type CreateNodesCsvMutationOptions = Apollo.BaseMutationOptions<ICreateNodesCsvMutation, ICreateNodesCsvMutationVariables>;\nexport const RebootServerDocument = gql`\n    mutation RebootServer($id: ID!) {\n  rebootServer(id: $id)\n}\n    `;\nexport type IRebootServerMutationFn = Apollo.MutationFunction<IRebootServerMutation, IRebootServerMutationVariables>;\n\n/**\n * __useRebootServerMutation__\n *\n * To run a mutation, you first call `useRebootServerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRebootServerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [rebootServerMutation, { data, loading, error }] = useRebootServerMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRebootServerMutation(baseOptions?: Apollo.MutationHookOptions<IRebootServerMutation, IRebootServerMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<IRebootServerMutation, IRebootServerMutationVariables>(RebootServerDocument, options);\n      }\nexport type RebootServerMutationHookResult = ReturnType<typeof useRebootServerMutation>;\nexport type RebootServerMutationResult = Apollo.MutationResult<IRebootServerMutation>;\nexport type RebootServerMutationOptions = Apollo.BaseMutationOptions<IRebootServerMutation, IRebootServerMutationVariables>;\nexport const EnableHaProxyServerDocument = gql`\n    mutation EnableHaProxyServer($id: ID!) {\n  enableHaProxyServer(id: $id)\n}\n    `;\nexport type IEnableHaProxyServerMutationFn = Apollo.MutationFunction<IEnableHaProxyServerMutation, IEnableHaProxyServerMutationVariables>;\n\n/**\n * __useEnableHaProxyServerMutation__\n *\n * To run a mutation, you first call `useEnableHaProxyServerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEnableHaProxyServerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [enableHaProxyServerMutation, { data, loading, error }] = useEnableHaProxyServerMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useEnableHaProxyServerMutation(baseOptions?: Apollo.MutationHookOptions<IEnableHaProxyServerMutation, IEnableHaProxyServerMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<IEnableHaProxyServerMutation, IEnableHaProxyServerMutationVariables>(EnableHaProxyServerDocument, options);\n      }\nexport type EnableHaProxyServerMutationHookResult = ReturnType<typeof useEnableHaProxyServerMutation>;\nexport type EnableHaProxyServerMutationResult = Apollo.MutationResult<IEnableHaProxyServerMutation>;\nexport type EnableHaProxyServerMutationOptions = Apollo.BaseMutationOptions<IEnableHaProxyServerMutation, IEnableHaProxyServerMutationVariables>;\nexport const DisableHaProxyServerDocument = gql`\n    mutation DisableHaProxyServer($id: ID!) {\n  disableHaProxyServer(id: $id)\n}\n    `;\nexport type IDisableHaProxyServerMutationFn = Apollo.MutationFunction<IDisableHaProxyServerMutation, IDisableHaProxyServerMutationVariables>;\n\n/**\n * __useDisableHaProxyServerMutation__\n *\n * To run a mutation, you first call `useDisableHaProxyServerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDisableHaProxyServerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [disableHaProxyServerMutation, { data, loading, error }] = useDisableHaProxyServerMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDisableHaProxyServerMutation(baseOptions?: Apollo.MutationHookOptions<IDisableHaProxyServerMutation, IDisableHaProxyServerMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<IDisableHaProxyServerMutation, IDisableHaProxyServerMutationVariables>(DisableHaProxyServerDocument, options);\n      }\nexport type DisableHaProxyServerMutationHookResult = ReturnType<typeof useDisableHaProxyServerMutation>;\nexport type DisableHaProxyServerMutationResult = Apollo.MutationResult<IDisableHaProxyServerMutation>;\nexport type DisableHaProxyServerMutationOptions = Apollo.BaseMutationOptions<IDisableHaProxyServerMutation, IDisableHaProxyServerMutationVariables>;\nexport const MuteMonitorDocument = gql`\n    mutation MuteMonitor($id: ID!) {\n  muteMonitor(id: $id) {\n    id\n    muted\n  }\n}\n    `;\nexport type IMuteMonitorMutationFn = Apollo.MutationFunction<IMuteMonitorMutation, IMuteMonitorMutationVariables>;\n\n/**\n * __useMuteMonitorMutation__\n *\n * To run a mutation, you first call `useMuteMonitorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMuteMonitorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [muteMonitorMutation, { data, loading, error }] = useMuteMonitorMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useMuteMonitorMutation(baseOptions?: Apollo.MutationHookOptions<IMuteMonitorMutation, IMuteMonitorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<IMuteMonitorMutation, IMuteMonitorMutationVariables>(MuteMonitorDocument, options);\n      }\nexport type MuteMonitorMutationHookResult = ReturnType<typeof useMuteMonitorMutation>;\nexport type MuteMonitorMutationResult = Apollo.MutationResult<IMuteMonitorMutation>;\nexport type MuteMonitorMutationOptions = Apollo.BaseMutationOptions<IMuteMonitorMutation, IMuteMonitorMutationVariables>;\nexport const UnmuteMonitorDocument = gql`\n    mutation UnmuteMonitor($id: ID!) {\n  unmuteMonitor(id: $id) {\n    id\n    muted\n  }\n}\n    `;\nexport type IUnmuteMonitorMutationFn = Apollo.MutationFunction<IUnmuteMonitorMutation, IUnmuteMonitorMutationVariables>;\n\n/**\n * __useUnmuteMonitorMutation__\n *\n * To run a mutation, you first call `useUnmuteMonitorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnmuteMonitorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unmuteMonitorMutation, { data, loading, error }] = useUnmuteMonitorMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUnmuteMonitorMutation(baseOptions?: Apollo.MutationHookOptions<IUnmuteMonitorMutation, IUnmuteMonitorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<IUnmuteMonitorMutation, IUnmuteMonitorMutationVariables>(UnmuteMonitorDocument, options);\n      }\nexport type UnmuteMonitorMutationHookResult = ReturnType<typeof useUnmuteMonitorMutation>;\nexport type UnmuteMonitorMutationResult = Apollo.MutationResult<IUnmuteMonitorMutation>;\nexport type UnmuteMonitorMutationOptions = Apollo.BaseMutationOptions<IUnmuteMonitorMutation, IUnmuteMonitorMutationVariables>;\nexport const ChainsDocument = gql`\n    query Chains {\n  chains {\n    id\n    name\n    type\n    variance\n  }\n}\n    `;\n\n/**\n * __useChainsQuery__\n *\n * To run a query within a React component, call `useChainsQuery` and pass it any options that fit your needs.\n * When your component renders, `useChainsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChainsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useChainsQuery(baseOptions?: Apollo.QueryHookOptions<IChainsQuery, IChainsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IChainsQuery, IChainsQueryVariables>(ChainsDocument, options);\n      }\nexport function useChainsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IChainsQuery, IChainsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IChainsQuery, IChainsQueryVariables>(ChainsDocument, options);\n        }\nexport type ChainsQueryHookResult = ReturnType<typeof useChainsQuery>;\nexport type ChainsLazyQueryHookResult = ReturnType<typeof useChainsLazyQuery>;\nexport type ChainsQueryResult = Apollo.QueryResult<IChainsQuery, IChainsQueryVariables>;\nexport const HostsDocument = gql`\n    query Hosts {\n  hosts {\n    id\n    name\n    ip\n    loadBalancer\n    location\n  }\n}\n    `;\n\n/**\n * __useHostsQuery__\n *\n * To run a query within a React component, call `useHostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useHostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHostsQuery(baseOptions?: Apollo.QueryHookOptions<IHostsQuery, IHostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IHostsQuery, IHostsQueryVariables>(HostsDocument, options);\n      }\nexport function useHostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IHostsQuery, IHostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IHostsQuery, IHostsQueryVariables>(HostsDocument, options);\n        }\nexport type HostsQueryHookResult = ReturnType<typeof useHostsQuery>;\nexport type HostsLazyQueryHookResult = ReturnType<typeof useHostsLazyQuery>;\nexport type HostsQueryResult = Apollo.QueryResult<IHostsQuery, IHostsQueryVariables>;\nexport const LocationsDocument = gql`\n    query Locations {\n  locations {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useLocationsQuery__\n *\n * To run a query within a React component, call `useLocationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useLocationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLocationsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLocationsQuery(baseOptions?: Apollo.QueryHookOptions<ILocationsQuery, ILocationsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ILocationsQuery, ILocationsQueryVariables>(LocationsDocument, options);\n      }\nexport function useLocationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ILocationsQuery, ILocationsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ILocationsQuery, ILocationsQueryVariables>(LocationsDocument, options);\n        }\nexport type LocationsQueryHookResult = ReturnType<typeof useLocationsQuery>;\nexport type LocationsLazyQueryHookResult = ReturnType<typeof useLocationsLazyQuery>;\nexport type LocationsQueryResult = Apollo.QueryResult<ILocationsQuery, ILocationsQueryVariables>;\nexport const NodeDocument = gql`\n    query Node($id: ID!) {\n  node(id: $id) {\n    id\n    backend\n    port\n    server\n    url\n    ssl\n    muted\n    loadBalancers\n  }\n}\n    `;\n\n/**\n * __useNodeQuery__\n *\n * To run a query within a React component, call `useNodeQuery` and pass it any options that fit your needs.\n * When your component renders, `useNodeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNodeQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useNodeQuery(baseOptions: Apollo.QueryHookOptions<INodeQuery, INodeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<INodeQuery, INodeQueryVariables>(NodeDocument, options);\n      }\nexport function useNodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<INodeQuery, INodeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<INodeQuery, INodeQueryVariables>(NodeDocument, options);\n        }\nexport type NodeQueryHookResult = ReturnType<typeof useNodeQuery>;\nexport type NodeLazyQueryHookResult = ReturnType<typeof useNodeLazyQuery>;\nexport type NodeQueryResult = Apollo.QueryResult<INodeQuery, INodeQueryVariables>;\nexport const NodesDocument = gql`\n    query Nodes {\n  nodes {\n    id\n    backend\n    port\n    server\n    url\n    ssl\n    muted\n    loadBalancers\n  }\n}\n    `;\n\n/**\n * __useNodesQuery__\n *\n * To run a query within a React component, call `useNodesQuery` and pass it any options that fit your needs.\n * When your component renders, `useNodesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNodesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useNodesQuery(baseOptions?: Apollo.QueryHookOptions<INodesQuery, INodesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<INodesQuery, INodesQueryVariables>(NodesDocument, options);\n      }\nexport function useNodesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<INodesQuery, INodesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<INodesQuery, INodesQueryVariables>(NodesDocument, options);\n        }\nexport type NodesQueryHookResult = ReturnType<typeof useNodesQuery>;\nexport type NodesLazyQueryHookResult = ReturnType<typeof useNodesLazyQuery>;\nexport type NodesQueryResult = Apollo.QueryResult<INodesQuery, INodesQueryVariables>;\nexport const LogsDocument = gql`\n    query Logs($nodeIds: [ID!]!, $page: Int!, $limit: Int!, $startDate: String, $endDate: String) {\n  logs(\n    nodeIds: $nodeIds\n    page: $page\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n  ) {\n    docs {\n      message\n      level\n      timestamp\n    }\n    totalDocs\n    page\n    hasPrevPage\n    hasNextPage\n  }\n}\n    `;\n\n/**\n * __useLogsQuery__\n *\n * To run a query within a React component, call `useLogsQuery` and pass it any options that fit your needs.\n * When your component renders, `useLogsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLogsQuery({\n *   variables: {\n *      nodeIds: // value for 'nodeIds'\n *      page: // value for 'page'\n *      limit: // value for 'limit'\n *      startDate: // value for 'startDate'\n *      endDate: // value for 'endDate'\n *   },\n * });\n */\nexport function useLogsQuery(baseOptions: Apollo.QueryHookOptions<ILogsQuery, ILogsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ILogsQuery, ILogsQueryVariables>(LogsDocument, options);\n      }\nexport function useLogsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ILogsQuery, ILogsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ILogsQuery, ILogsQueryVariables>(LogsDocument, options);\n        }\nexport type LogsQueryHookResult = ReturnType<typeof useLogsQuery>;\nexport type LogsLazyQueryHookResult = ReturnType<typeof useLogsLazyQuery>;\nexport type LogsQueryResult = Apollo.QueryResult<ILogsQuery, ILogsQueryVariables>;\nexport const OraclesDocument = gql`\n    query Oracles {\n  oracles {\n    id\n    chain\n    urls\n  }\n}\n    `;\n\n/**\n * __useOraclesQuery__\n *\n * To run a query within a React component, call `useOraclesQuery` and pass it any options that fit your needs.\n * When your component renders, `useOraclesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOraclesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useOraclesQuery(baseOptions?: Apollo.QueryHookOptions<IOraclesQuery, IOraclesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IOraclesQuery, IOraclesQueryVariables>(OraclesDocument, options);\n      }\nexport function useOraclesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IOraclesQuery, IOraclesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IOraclesQuery, IOraclesQueryVariables>(OraclesDocument, options);\n        }\nexport type OraclesQueryHookResult = ReturnType<typeof useOraclesQuery>;\nexport type OraclesLazyQueryHookResult = ReturnType<typeof useOraclesLazyQuery>;\nexport type OraclesQueryResult = Apollo.QueryResult<IOraclesQuery, IOraclesQueryVariables>;\nexport const WebhooksDocument = gql`\n    query Webhooks {\n  webhooks {\n    id\n    location\n    chain\n    url\n  }\n}\n    `;\n\n/**\n * __useWebhooksQuery__\n *\n * To run a query within a React component, call `useWebhooksQuery` and pass it any options that fit your needs.\n * When your component renders, `useWebhooksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWebhooksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWebhooksQuery(baseOptions?: Apollo.QueryHookOptions<IWebhooksQuery, IWebhooksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IWebhooksQuery, IWebhooksQueryVariables>(WebhooksDocument, options);\n      }\nexport function useWebhooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IWebhooksQuery, IWebhooksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IWebhooksQuery, IWebhooksQueryVariables>(WebhooksDocument, options);\n        }\nexport type WebhooksQueryHookResult = ReturnType<typeof useWebhooksQuery>;\nexport type WebhooksLazyQueryHookResult = ReturnType<typeof useWebhooksLazyQuery>;\nexport type WebhooksQueryResult = Apollo.QueryResult<IWebhooksQuery, IWebhooksQueryVariables>;\nexport const GetHostsChainsAndLoadBalancersDocument = gql`\n    query GetHostsChainsAndLoadBalancers {\n  hosts {\n    id\n    name\n    ip\n    location\n  }\n  chains {\n    id\n    name\n  }\n  loadBalancers: hosts(loadBalancer: true) {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useGetHostsChainsAndLoadBalancersQuery__\n *\n * To run a query within a React component, call `useGetHostsChainsAndLoadBalancersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetHostsChainsAndLoadBalancersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetHostsChainsAndLoadBalancersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetHostsChainsAndLoadBalancersQuery(baseOptions?: Apollo.QueryHookOptions<IGetHostsChainsAndLoadBalancersQuery, IGetHostsChainsAndLoadBalancersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IGetHostsChainsAndLoadBalancersQuery, IGetHostsChainsAndLoadBalancersQueryVariables>(GetHostsChainsAndLoadBalancersDocument, options);\n      }\nexport function useGetHostsChainsAndLoadBalancersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IGetHostsChainsAndLoadBalancersQuery, IGetHostsChainsAndLoadBalancersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IGetHostsChainsAndLoadBalancersQuery, IGetHostsChainsAndLoadBalancersQueryVariables>(GetHostsChainsAndLoadBalancersDocument, options);\n        }\nexport type GetHostsChainsAndLoadBalancersQueryHookResult = ReturnType<typeof useGetHostsChainsAndLoadBalancersQuery>;\nexport type GetHostsChainsAndLoadBalancersLazyQueryHookResult = ReturnType<typeof useGetHostsChainsAndLoadBalancersLazyQuery>;\nexport type GetHostsChainsAndLoadBalancersQueryResult = Apollo.QueryResult<IGetHostsChainsAndLoadBalancersQuery, IGetHostsChainsAndLoadBalancersQueryVariables>;\nexport const GetNodeStatusDocument = gql`\n    query GetNodeStatus($id: ID!) {\n  haProxyStatus: getHaProxyStatus(id: $id)\n}\n    `;\n\n/**\n * __useGetNodeStatusQuery__\n *\n * To run a query within a React component, call `useGetNodeStatusQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetNodeStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetNodeStatusQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetNodeStatusQuery(baseOptions: Apollo.QueryHookOptions<IGetNodeStatusQuery, IGetNodeStatusQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IGetNodeStatusQuery, IGetNodeStatusQueryVariables>(GetNodeStatusDocument, options);\n      }\nexport function useGetNodeStatusLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IGetNodeStatusQuery, IGetNodeStatusQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IGetNodeStatusQuery, IGetNodeStatusQueryVariables>(GetNodeStatusDocument, options);\n        }\nexport type GetNodeStatusQueryHookResult = ReturnType<typeof useGetNodeStatusQuery>;\nexport type GetNodeStatusLazyQueryHookResult = ReturnType<typeof useGetNodeStatusLazyQuery>;\nexport type GetNodeStatusQueryResult = Apollo.QueryResult<IGetNodeStatusQuery, IGetNodeStatusQueryVariables>;","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport dayjs from \"dayjs\";\nimport { Bar } from \"react-chartjs-2\";\n\nimport { ILogsQuery } from \"types\";\nimport { ITimePeriod } from \"./Logs\";\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip);\n\nexport const options = {\n  responsive: true,\n  maintainAspectRatio: false,\n};\n\ninterface LogsChartProps {\n  logs: ILogsQuery[\"logs\"][\"docs\"];\n  logPeriod: ITimePeriod;\n}\n\nexport default function LogsChart({ logs, logPeriod }: LogsChartProps) {\n  const timePeriod = Date.now() - (Date.now() - logPeriod.timePeriod);\n  const increments = Math.floor(timePeriod / logPeriod.resolution);\n  console.log({ increments });\n  const labels = [...Array(increments)].map((_, i, a) =>\n    dayjs(Date.now() - (a.length - i) * logPeriod.resolution).format(logPeriod.format),\n  );\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: labels.map(() => 1),\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      },\n    ],\n  };\n\n  return (\n    <div style={{ height: \"200px\", width: \"100%\" }}>\n      <Bar options={options} data={data} />\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n} from \"@mui/material\";\n\nimport { LogTable } from \"components\";\nimport { ILogsQuery, IParsedLog, useLogsQuery, useNodesQuery } from \"types\";\n\nimport LogsChart from \"./LogsChart\";\n\nconst ONE_MINUTE = 60 * 1000;\nconst ONE_HOUR = ONE_MINUTE * 60;\nconst ONE_DAY = ONE_HOUR * 24;\n\nexport interface ITimePeriod {\n  code: string;\n  label: string;\n  timePeriod: number;\n  resolution: number;\n  format: string;\n}\n\nconst timePeriods: ITimePeriod[] = [\n  {\n    code: \"15M\",\n    label: \"Past 15 Minutes\",\n    timePeriod: ONE_MINUTE * 15,\n    resolution: ONE_MINUTE,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"1H\",\n    label: \"Past 2 Hours\",\n    timePeriod: ONE_HOUR,\n    resolution: ONE_MINUTE * 5,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"4H\",\n    label: \"Past 4 Hours\",\n    timePeriod: ONE_HOUR * 4,\n    resolution: ONE_MINUTE * 15,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"1D\",\n    label: \"Past 1 Day\",\n    timePeriod: ONE_DAY,\n    resolution: ONE_HOUR,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"2D\",\n    label: \"Past 2 Days\",\n    timePeriod: ONE_DAY * 2,\n    resolution: ONE_HOUR * 3,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"3D\",\n    label: \"Past 3 Days\",\n    timePeriod: ONE_DAY * 3,\n    resolution: ONE_HOUR * 6,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"7D\",\n    label: \"Past 7 Days\",\n    timePeriod: ONE_DAY * 7,\n    resolution: ONE_HOUR * 12,\n    format: \"HH:mm\",\n  },\n  {\n    code: \"15D\",\n    label: \"Past 15 Days\",\n    timePeriod: ONE_DAY * 15,\n    resolution: ONE_DAY,\n    format: \"ddd MMM DD\",\n  },\n  {\n    code: \"1MO\",\n    label: \"Past 1 Month\",\n    timePeriod: ONE_DAY * 30,\n    resolution: ONE_DAY * 2,\n    format: \"ddd, MMM DD\",\n  },\n];\n\nexport function Logs() {\n  const [nodes, setNodes] = useState<string[]>([]);\n  const [logPeriod, setLogPeriod] = useState<ITimePeriod>(timePeriods[0]);\n  const [logsLoading, setLogsLoading] = useState(false);\n\n  const { data: nodesData, error: nodesError, loading: nodesLoading } = useNodesQuery();\n  const {\n    data: logsData,\n    error: logsError,\n    fetchMore,\n    refetch,\n  } = useLogsQuery({\n    variables: { nodeIds: nodes, page: 1, limit: 100 },\n    onCompleted: () => setLogsLoading(false),\n    onError: () => setLogsLoading(false),\n  });\n\n  useEffect(() => {\n    setLogsLoading(true);\n    refetch();\n  }, [nodes]);\n\n  const handleTimePeriodChange = ({ target }: SelectChangeEvent<string>) => {\n    const { value } = target;\n    setLogPeriod(timePeriods.find(({ code }) => code === value)!);\n  };\n\n  const handleNodesChange = ({ target }: SelectChangeEvent<typeof nodes>) => {\n    const { value } = target;\n    console.log({ value });\n    setNodes(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  if (nodesLoading) return <>Loading...</>;\n  if (nodesError || logsError) return <>Error! ${(nodesError || logsError)?.message}</>;\n\n  if (logsData) console.log(\"LOGS DATA HERE!!!\", { logsData });\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"16px\",\n      }}\n    >\n      <FormControl fullWidth>\n        <InputLabel id=\"lb-label\">Select Nodes</InputLabel>\n        <Select\n          multiple\n          labelId=\"lb-label\"\n          value={nodes}\n          onChange={handleNodesChange}\n          input={<OutlinedInput label=\"Nodes\" />}\n          renderValue={(selected) => {\n            return selected\n              .map((id) => nodesData?.nodes!.find(({ id: node }) => node === id)!.backend)\n              .join(\", \");\n          }}\n        >\n          {nodesData?.nodes.map(({ port, backend, id, server }) => (\n            <MenuItem key={id} value={id}>\n              <Checkbox checked={nodes.indexOf(id!) > -1} />\n              <ListItemText primary={`${backend}/${port}/${server}`} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <div style={{ marginTop: \"10px\" }} />\n      <FormControl fullWidth>\n        <InputLabel id=\"chain-label\">Time Period</InputLabel>\n        <Select\n          labelId=\"chain-label\"\n          value={logPeriod.code}\n          label=\"Time Period\"\n          onChange={handleTimePeriodChange}\n        >\n          {timePeriods.map(({ code, label }) => (\n            <MenuItem key={code} value={code}>\n              {label}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <div style={{ marginTop: \"10px\" }} />\n      {logsData && <LogsChart logs={logsData.logs.docs} logPeriod={logPeriod} />}\n      <div style={{ marginTop: \"10px\" }} />\n      {logsData && (\n        <LogTable\n          type={`Showing ${logsData.logs.docs.length} log entries for ${nodes.length} Nodes.`}\n          searchable\n          rows={logsData.logs.docs}\n          loading={logsLoading}\n          loadItems={() => {\n            if (logsData.logs.hasNextPage) {\n              setLogsLoading(true);\n              fetchMore({\n                variables: { page: logsData.logs.docs.length / 100 + 1 },\n              });\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Table } from \"components\";\nimport { useChainsQuery } from \"types\";\n\nexport function Chains() {\n  const { data, error, loading } = useChainsQuery();\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>Error! ${error.message}</>;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"16px\",\n      }}\n    >\n      {data && <Table type=\"Chains\" searchable paginate rows={data.chains} />}\n    </div>\n  );\n}\n","import { ChangeEvent, useState } from \"react\";\nimport { ApolloQueryResult } from \"@apollo/client\";\nimport {\n  Paper,\n  Select,\n  SelectChangeEvent,\n  Switch,\n  Button,\n  FormControl,\n  TextField,\n  MenuItem,\n} from \"@mui/material\";\n\nimport { IHostsQuery, useCreateHostMutation, useLocationsQuery } from \"types\";\n\ninterface HostsFormProps {\n  refetchHosts: (variables?: any) => Promise<ApolloQueryResult<IHostsQuery>>;\n}\n\nexport function HostsForm({ refetchHosts }: HostsFormProps) {\n  const [location, setLocation] = useState(\"NL\");\n  const [name, setName] = useState(\"\");\n  const [ip, setIP] = useState(\"\");\n  const [fqdn, setFQDN] = useState(\"\");\n  const [loadBalancer, setLoadBalancer] = useState(false);\n\n  const { data, error, loading } = useLocationsQuery();\n  const [submit] = useCreateHostMutation({ onCompleted: () => refetchHosts() });\n\n  const handleLocationChange = (event: SelectChangeEvent<typeof location>) => {\n    setLocation(event.target.value);\n  };\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleIPChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setIP(event.target.value);\n  };\n\n  const handleFQDNChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFQDN(event.target.value);\n  };\n\n  const handleLBChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setLoadBalancer(event.target.checked);\n  };\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>Error! ${error.message}</>;\n\n  return (\n    <>\n      <div>\n        <Paper style={{ width: \"200%\", padding: 10 }} variant=\"outlined\">\n          <FormControl fullWidth>\n            <Select value={location} onChange={handleLocationChange}>\n              {data?.locations.map(({ id, name }) => (\n                <MenuItem value={id}>{name}</MenuItem>\n              ))}\n            </Select>\n            <div style={{ marginTop: \"10px\" }} />\n            <TextField\n              value={name}\n              onChange={handleNameChange}\n              label=\"Host Name\"\n              variant=\"outlined\"\n            />\n            <div style={{ marginTop: \"10px\" }} />\n            <TextField\n              value={ip}\n              onChange={handleIPChange}\n              label=\"Host IP\"\n              variant=\"outlined\"\n            />\n            <div style={{ marginTop: \"10px\" }} />\n            <TextField\n              value={fqdn}\n              onChange={handleFQDNChange}\n              label=\"Host FQDN\"\n              variant=\"outlined\"\n            />\n            <div>\n              Load Balancer\n              <Switch checked={loadBalancer} onChange={handleLBChange} />\n            </div>\n\n            <Button\n              fullWidth\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n              variant=\"outlined\"\n              onClick={() => {\n                submit({ variables: { location, name, ip, fqdn, loadBalancer } });\n                setLocation(\"\");\n                setName(\"\");\n                setIP(\"\");\n                setFQDN(\"\");\n                setLoadBalancer(false);\n              }}\n            >\n              Submit\n            </Button>\n          </FormControl>\n        </Paper>\n      </div>\n    </>\n  );\n}\n","import { Table } from \"components\";\nimport { useHostsQuery } from \"types\";\nimport { HostsForm } from \"./HostsForm\";\n\nexport function Hosts() {\n  const { data, error, loading, refetch } = useHostsQuery();\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>Error! ${error.message}</>;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"16px\",\n      }}\n    >\n      <div style={{ marginBottom: \"16px\" }}>\n        <HostsForm refetchHosts={refetch} />\n      </div>\n      {data && <Table type=\"Hosts\" searchable paginate rows={data.hosts} />}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { ApolloQueryResult } from \"@apollo/client\";\nimport CSVReader from \"react-csv-reader\";\nimport {\n  Alert,\n  AlertTitle,\n  Box,\n  Button,\n  CircularProgress,\n  Modal,\n  Typography,\n} from \"@mui/material\";\n\nimport { Table } from \"components\";\nimport {\n  IGetHostsChainsAndLoadBalancersQuery,\n  INodeCsvInput,\n  INodesQuery,\n  useCreateNodesCsvMutation,\n} from \"types\";\nimport { parseBackendError } from \"utils\";\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"90%\",\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\ninterface ICSVNode {\n  chain: string;\n  haProxy: string;\n  host: string;\n  loadBalancers: string;\n  port: string;\n  url: string;\n  backend?: string;\n  server?: string;\n}\n\ninterface NodesCSVProps {\n  formData: IGetHostsChainsAndLoadBalancersQuery;\n  refetchNodes: (variables?: any) => Promise<ApolloQueryResult<INodesQuery>>;\n}\n\nexport function NodesCSV({\n  formData: { chains, hosts, loadBalancers },\n  refetchNodes,\n}: NodesCSVProps) {\n  const [open, setOpen] = useState(false);\n  const [nodes, setNodes] = useState<INodeCsvInput[] | undefined>(undefined);\n  const [nodesError, setNodesError] = useState<string>(\"\");\n  const [backendError, setBackendError] = useState<string>(\"\");\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const [submit, { error, loading }] = useCreateNodesCsvMutation({\n    onCompleted: () => {\n      refetchNodes();\n      handleClose();\n    },\n  });\n\n  useEffect(() => {\n    if (error) {\n      setBackendError(parseBackendError(error));\n    }\n  }, [error]);\n\n  const submitCSV = () => {\n    if (nodes) {\n      submit({ variables: { nodes } });\n    }\n  };\n\n  const validChains = chains.map(({ name }) => name);\n  const validHosts = hosts.map(({ name }) => name);\n  const validLoadBalancers = loadBalancers.map(({ name }) => name);\n  const schema = {\n    chain: (value: string) => validChains.includes(value.toUpperCase()),\n    host: (value: string) => validHosts.includes(value.toLowerCase()),\n    haProxy: (value: string) =>\n      value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\",\n    loadBalancers: (value: string) =>\n      value\n        .toLowerCase()\n        .split(\",\")\n        .every((lb: string) => validLoadBalancers.includes(lb)),\n    port: (value: string) =>\n      /^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/.test(\n        value,\n      ),\n    url: (value: string) =>\n      /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/.test(\n        value,\n      ),\n  };\n  const validate = (object: any, schema: { [key: string]: (value: string) => boolean }) =>\n    Object.keys(schema).filter((key) => !schema[key](object[key]));\n\n  const parseNodesCSV = (nodesData: ICSVNode[]) => {\n    const nodesWithRequiredFields = nodesData.filter((node) =>\n      Object.keys(schema).every((key) => Object.keys(node).includes(key)),\n    );\n\n    const invalidNodes: any = [];\n    const parsedNodes = nodesWithRequiredFields.map((node) => {\n      const invalidFields = validate(node, schema);\n      if (invalidFields.length) {\n        invalidNodes.push(`[${node.host}/${node.chain}]: ${invalidFields.join(\", \")}`);\n      }\n      return {\n        ...node,\n        chain: node.chain.toUpperCase(),\n        host: node.host.toLowerCase(),\n        port: Number(node.port),\n        loadBalancers: node.loadBalancers?.toLowerCase().split(\",\"),\n        haProxy: Boolean(node.haProxy),\n      };\n    });\n\n    if (invalidNodes.length) {\n      setNodesError(invalidNodes.join(\"\\n\"));\n    } else {\n      setNodes(parsedNodes);\n    }\n  };\n\n  return (\n    <div>\n      <Button onClick={handleOpen} variant=\"outlined\">\n        Upload CSV\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Upload Nodes CSV\n          </Typography>\n          <CSVReader onFileLoaded={parseNodesCSV} parserOptions={{ header: true }} />\n          {nodesError && (\n            <Alert severity=\"error\">\n              <AlertTitle>\n                Warning: Invalid fields detected. Please correct the following fields\n                before attempting to upload Nodes CSV.\n              </AlertTitle>\n              {nodesError}\n            </Alert>\n          )}\n          {backendError && (\n            <Alert severity=\"error\">\n              <AlertTitle>Backend error: {backendError}</AlertTitle>\n            </Alert>\n          )}\n          {nodes && (\n            <>\n              <Table\n                type={`Adding ${nodes.length} Node${nodes.length === 1 ? \"\" : \"s\"}`}\n                rows={nodes}\n              />\n              <Button style={{ marginTop: 8 }} onClick={submitCSV} variant=\"outlined\">\n                {loading ? (\n                  <CircularProgress size={20} />\n                ) : (\n                  `Add ${nodes.length} Node${nodes.length === 1 ? \"\" : \"s\"}`\n                )}\n              </Button>\n            </>\n          )}\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n","export const parseBackendError = ({ message }: any): string => {\n  if (message.includes(\"duplicate key error collection\")) {\n    const fields = message.split(\"{\")[1];\n    return `Validation Error - Record already exists with fields: { ${fields}`;\n  } else {\n    return message;\n  }\n};\n","import { ChangeEvent, useState } from \"react\";\nimport { ApolloQueryResult } from \"@apollo/client\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Paper,\n  Select,\n  SelectChangeEvent,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\n\nimport {\n  INodesQuery,\n  IGetHostsChainsAndLoadBalancersQuery,\n  useCreateNodeMutation,\n} from \"types\";\n\ninterface HostsFormProps {\n  formData: IGetHostsChainsAndLoadBalancersQuery;\n  refetchNodes: (variables?: any) => Promise<ApolloQueryResult<INodesQuery>>;\n}\n\nexport function NodesForm({ formData, refetchNodes }: HostsFormProps) {\n  const [chain, setChain] = useState(\"\");\n  const [host, setHost] = useState(\"\");\n  const [ip, setIp] = useState(\"\");\n  const [loadBalancers, setLoadBalancers] = useState<string[]>([]);\n  const [port, setPort] = useState(0);\n  const [backend, setBackend] = useState(\"\");\n  const [server, setServer] = useState(\"\");\n  const [haProxy, setHaproxy] = useState(true);\n\n  const [submit] = useCreateNodeMutation({\n    onCompleted: () => refetchNodes(),\n    onError: (error) => console.log({ error }),\n  });\n\n  const handleChainChange = (event: SelectChangeEvent<typeof chain>) => {\n    setChain(event.target.value);\n  };\n\n  const handleHostChange = (event: SelectChangeEvent<typeof host>) => {\n    if (formData?.hosts) {\n      const { ip } = formData.hosts.find(({ id }) => id === event.target.value)!;\n      setIp(ip!);\n      console.log({ ip });\n    }\n\n    setHost(event.target.value);\n  };\n\n  const handleLoadBalancerChange = ({\n    target,\n  }: SelectChangeEvent<typeof loadBalancers>) => {\n    const { value } = target;\n    setLoadBalancers(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const handlePortChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setPort(Number(event.target.value));\n  };\n\n  const handleBackendChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBackend(event.target.value);\n  };\n\n  const handleServerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setServer(event.target.value);\n  };\n\n  const handleHaproxyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setHaproxy(event.target.checked);\n  };\n\n  return (\n    <>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <Paper style={{ width: \"200%\", padding: 10 }} variant=\"outlined\">\n          <Typography align=\"center\" variant=\"h6\" gutterBottom>\n            Add New Node\n          </Typography>\n          <FormControl fullWidth>\n            <InputLabel id=\"chain-label\">Chain</InputLabel>\n            <Select\n              labelId=\"chain-label\"\n              value={chain}\n              label=\"Chain\"\n              onChange={handleChainChange}\n            >\n              {formData?.chains.map(({ name, id }) => (\n                <MenuItem key={id} value={id}>\n                  {name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <div style={{ marginTop: \"10px\" }} />\n          <FormControl fullWidth>\n            <InputLabel id=\"host-label\">Host</InputLabel>\n            <Select\n              labelId=\"host-label\"\n              value={host}\n              label=\"Host\"\n              onChange={handleHostChange}\n            >\n              {formData?.hosts.map(({ name, id, location }) => (\n                <MenuItem key={id} value={id}>\n                  {`${name} - ${location}`}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <div style={{ marginTop: \"10px\" }} />\n          <FormControl fullWidth>\n            <InputLabel id=\"lb-label\">Load Balancers</InputLabel>\n            <Select\n              multiple\n              labelId=\"lb-label\"\n              value={loadBalancers}\n              onChange={handleLoadBalancerChange}\n              input={<OutlinedInput label=\"Load Balancers\" />}\n              renderValue={(selected) => {\n                return selected\n                  .map(\n                    (id) =>\n                      formData?.loadBalancers!.find(({ id: lb }) => lb === id)!.name,\n                  )\n                  .join(\", \");\n              }}\n            >\n              {formData?.loadBalancers.map(({ name, id }) => (\n                <MenuItem key={id} value={id}>\n                  <Checkbox checked={loadBalancers.indexOf(id!) > -1} />\n                  <ListItemText primary={name} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <div style={{ marginTop: \"10px\" }} />\n          <FormControl fullWidth>\n            <TextField\n              value={port}\n              onChange={handlePortChange}\n              label=\"Port\"\n              variant=\"outlined\"\n            />\n          </FormControl>\n          <div style={{ marginTop: \"10px\" }} />\n          <FormControl fullWidth>\n            <TextField\n              value={backend}\n              onChange={handleBackendChange}\n              label=\"Backend\"\n              variant=\"outlined\"\n            />\n          </FormControl>\n\n          <div style={{ marginTop: \"10px\" }} />\n          <FormControl fullWidth>\n            <TextField\n              value={server}\n              onChange={handleServerChange}\n              label=\"Server\"\n              variant=\"outlined\"\n            />\n          </FormControl>\n          <div\n            style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}\n          >\n            <div>\n              HAproxy\n              <Switch checked={haProxy} onChange={handleHaproxyChange} />\n            </div>\n          </div>\n\n          <Button\n            fullWidth\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n            variant=\"outlined\"\n            onClick={() => {\n              submit({\n                variables: {\n                  backend,\n                  chain,\n                  haProxy,\n                  host,\n                  port,\n                  server,\n                  loadBalancers,\n                  url: `http://${ip}:${port}`,\n                },\n              });\n            }}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </div>\n    </>\n  );\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { Button, CircularProgress, FormControl, Paper, Typography } from \"@mui/material\";\n\nimport {\n  INode,\n  useDisableHaProxyServerMutation,\n  useEnableHaProxyServerMutation,\n  useGetNodeStatusLazyQuery,\n  useMuteMonitorMutation,\n  useRebootServerMutation,\n  useUnmuteMonitorMutation,\n} from \"types\";\n\ninterface INodeStatusProps {\n  selectedNode: INode;\n  setSelectedNode: Dispatch<SetStateAction<INode | undefined>>;\n}\n\nexport function NodeStatus({ selectedNode, setSelectedNode }: INodeStatusProps) {\n  const { id, backend, port, server, url, muted } = selectedNode;\n\n  const [rebooting, setRebooting] = useState<boolean>(false);\n\n  const [getStatus, { data, error, loading }] = useGetNodeStatusLazyQuery();\n  const [rebootServer] = useRebootServerMutation({\n    onCompleted: () => {\n      setTimeout(() => {\n        getStatus();\n        setRebooting(false);\n      }, 10000);\n    },\n    // DEV NOTE -> Add error display to UI\n    onError: (_error) => setRebooting(false),\n  });\n  const [enable] = useEnableHaProxyServerMutation({\n    onCompleted: () => getStatus(),\n  });\n  const [disable] = useDisableHaProxyServerMutation({\n    onCompleted: () => getStatus(),\n  });\n\n  const [muteMonitor] = useMuteMonitorMutation({\n    onCompleted: ({ muteMonitor }) => {\n      const { muted } = muteMonitor;\n      setSelectedNode({ ...selectedNode, muted });\n    },\n  });\n  const [unmuteMonitor] = useUnmuteMonitorMutation({\n    onCompleted: ({ unmuteMonitor }) => {\n      const { muted } = unmuteMonitor;\n      setSelectedNode({ ...selectedNode, muted });\n    },\n  });\n\n  useEffect(() => {\n    const { id } = selectedNode;\n    getStatus({ variables: { id } });\n  }, [getStatus, selectedNode]);\n\n  const handleRebootServer = (id: string): void => {\n    if (!rebooting) {\n      setRebooting(true);\n      rebootServer({ variables: { id } });\n    }\n  };\n\n  const handleHaProxyToggle = (id: string, haProxyStatus: number) =>\n    haProxyStatus === 0 ? disable({ variables: { id } }) : enable({ variables: { id } });\n\n  const handleMuteToggle = (id: string) =>\n    muted ? unmuteMonitor({ variables: { id } }) : muteMonitor({ variables: { id } });\n\n  if (loading) return <>Loading...</>;\n  if (error) return <> Error! ${error.message}</>;\n\n  if (data) {\n    const { haProxyStatus } = data;\n    const haProxyStatusText = {\n      \"-1\": \"No HAProxy\",\n      \"0\": \"OK\",\n      \"1\": \"Offline\",\n    }[haProxyStatus];\n    const muteStatusText = muted ? \"Muted\" : \"Not Muted\";\n\n    return (\n      <>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <Paper style={{ width: 434, padding: 10 }} variant=\"outlined\">\n            <Typography align=\"center\" variant=\"h6\" gutterBottom>\n              Selected Node\n            </Typography>\n            <Paper style={{ padding: 10 }} variant=\"outlined\">\n              <Typography>Backend: {backend}</Typography>\n              <Typography>Port: {port || \"None\"}</Typography>\n              <Typography>Server: {server || \"None\"}</Typography>\n              <Typography>{url}</Typography>\n            </Paper>\n            <div style={{ marginTop: \"10px\" }} />\n            <Paper style={{ padding: 10 }} variant=\"outlined\">\n              {rebooting ? (\n                <Typography variant=\"h4\">Rebooting...</Typography>\n              ) : (\n                <>\n                  <Typography variant=\"h6\">\n                    HAProxy Status: {haProxyStatusText}\n                  </Typography>\n                  <Typography variant=\"h6\">Mute Status: {muteStatusText}</Typography>\n                </>\n              )}\n            </Paper>\n            <div style={{ marginTop: \"10px\" }} />\n            <Paper\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                width: \"100%\",\n                padding: 10,\n              }}\n              variant=\"outlined\"\n            >\n              <FormControl fullWidth>\n                <Button\n                  fullWidth\n                  style={{ display: \"flex\", justifyContent: \"center\" }}\n                  variant=\"outlined\"\n                  onClick={() => handleRebootServer(id)}\n                  disabled={haProxyStatus !== 0}\n                >\n                  {rebooting ? (\n                    <>\n                      <CircularProgress size={20} sx={{ marginRight: \"8px\" }} />\n                      Rebooting Server...\n                    </>\n                  ) : (\n                    \"Reboot Server\"\n                  )}\n                </Button>\n                <div style={{ marginTop: \"10px\" }} />\n                <Button\n                  fullWidth\n                  style={{ display: \"flex\", justifyContent: \"center\" }}\n                  variant=\"outlined\"\n                  onClick={() => handleHaProxyToggle(id, haProxyStatus)}\n                  disabled={haProxyStatus === -1}\n                >\n                  {\n                    { \"-1\": \"No HAProxy\", 0: \"Disable HAProxy\", 1: \"Enable HAProxy\" }[\n                      haProxyStatus\n                    ]\n                  }\n                </Button>\n                <div style={{ marginTop: \"10px\" }} />\n                <Button\n                  fullWidth\n                  style={{ display: \"flex\", justifyContent: \"center\" }}\n                  variant=\"outlined\"\n                  onClick={() => handleMuteToggle(id)}\n                >\n                  {muted ? \"Unmute Monitor\" : \"Mute Monitor\"}\n                </Button>\n              </FormControl>\n            </Paper>\n          </Paper>\n        </div>\n      </>\n    );\n  }\n\n  return <></>;\n}\n","import { useState } from \"react\";\n\nimport { Table } from \"components\";\nimport { INode, useGetHostsChainsAndLoadBalancersQuery, useNodesQuery } from \"types\";\n\nimport { NodesCSV } from \"./NodesCSV\";\nimport { NodesForm } from \"./NodesForm\";\nimport { NodeStatus } from \"./NodeStatus\";\n\nexport function Nodes() {\n  const [selectedNode, setSelectedNode] = useState<INode | undefined>(undefined);\n  const { data, error, loading, refetch } = useNodesQuery();\n  const {\n    data: formData,\n    error: formError,\n    loading: formLoading,\n  } = useGetHostsChainsAndLoadBalancersQuery();\n\n  if ((loading || formLoading) && !selectedNode) return <>Loading...</>;\n  if (error || formError) return <>Error! ${(error || formError)?.message}</>;\n\n  if (data && formData) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          margin: \"16px\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"60%\",\n            marginBottom: \"16px\",\n          }}\n        >\n          <NodesForm formData={formData} refetchNodes={refetch} />\n          {selectedNode && (\n            <NodeStatus selectedNode={selectedNode} setSelectedNode={setSelectedNode} />\n          )}\n          <NodesCSV formData={formData} refetchNodes={refetch} />\n        </div>\n        <Table\n          type=\"Nodes\"\n          paginate\n          searchable\n          rows={data.nodes}\n          selectedRow={selectedNode?.id}\n          onSelectRow={setSelectedNode}\n        />\n      </div>\n    );\n  }\n\n  return <></>;\n}\n","import { Table } from \"components\";\nimport { useOraclesQuery } from \"types\";\n\nexport function Oracles() {\n  const { data, error, loading } = useOraclesQuery();\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>Error! ${error.message}</>;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"16px\",\n      }}\n    >\n      {data && <Table type=\"Oracles\" searchable rows={data.oracles} />}\n    </div>\n  );\n}\n","import { Table } from \"components\";\nimport { useWebhooksQuery } from \"types\";\n\nexport function Webhooks() {\n  const { data, error, loading } = useWebhooksQuery();\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>Error! ${error.message}</>;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"16px\",\n      }}\n    >\n      {data && <Table type=\"Webhooks\" searchable paginate rows={data.webhooks} />}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { styled, createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport MuiDrawer from \"@mui/material/Drawer\";\nimport Box from \"@mui/material/Box\";\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Container from \"@mui/material/Container\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\n\nimport { Route } from \"react-router-dom\";\nimport { Home, Chains, Hosts, Logs, Nodes, Oracles, Settings, Webhooks } from \"./pages\";\nimport { Nav } from \"./components\";\n\nconst drawerWidth: number = 240;\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create([\"width\", \"margin\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== \"open\" })(\n  ({ theme, open }) => ({\n    \"& .MuiDrawer-paper\": {\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      boxSizing: \"border-box\",\n      ...(!open && {\n        overflowX: \"hidden\",\n        transition: theme.transitions.create(\"width\", {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up(\"sm\")]: {\n          width: theme.spacing(9),\n        },\n      }),\n    },\n  }),\n);\n\nconst mdTheme = createTheme();\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <ThemeProvider theme={mdTheme}>\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <AppBar position=\"absolute\" open={open}>\n          <Toolbar\n            sx={{\n              pr: \"24px\", // keep right padding when drawer closed\n            }}\n          >\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer}\n              sx={{\n                marginRight: \"36px\",\n                ...(open && { display: \"none\" }),\n              }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              flex=\"1\"\n              align=\"center\"\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"black\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              Pocket Node Nanny\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"permanent\" open={open}>\n          <Toolbar\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n              px: [1],\n            }}\n          >\n            <IconButton onClick={toggleDrawer}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </Toolbar>\n          <Nav />\n        </Drawer>\n        <Box\n          component=\"main\"\n          sx={{\n            backgroundColor: (theme) =>\n              theme.palette.mode === \"light\"\n                ? theme.palette.grey[100]\n                : theme.palette.grey[900],\n            flexGrow: 1,\n            height: \"100vh\",\n            overflow: \"auto\",\n          }}\n        >\n          <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n            <div>___</div>\n          </Container>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/logs\" component={Logs} />\n          <Route exact path=\"/nodes\" component={Nodes} />\n          <Route exact path=\"/hosts\" component={Hosts} />\n\n          <Route exact path=\"/chains\" component={Chains} />\n          <Route exact path=\"/oracles\" component={Oracles} />\n          <Route exact path=\"/webhooks\" component={Webhooks} />\n          <Route exact path=\"/settings\" component={Settings} />\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default function Dashboard() {\n  return <DashboardContent />;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport apolloClient from \"./apollo/client\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}